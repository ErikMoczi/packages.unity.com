//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Generated by EntityQueryBuilder.tt (89 `foreach` combinations)

using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;

namespace Unity.Entities
{
    public partial struct EntityQueryBuilder
    {
        // ** FLUENT QUERY **

        public EntityQueryBuilder WithAny<T0>()
        {
            ValidateHasNoGroup();
            m_Any.Add(TypeManager.GetTypeIndex<T0>());
            return this;
        }

        public EntityQueryBuilder WithAny<T0, T1>()
        {
            ValidateHasNoGroup();
            m_Any.Add(TypeManager.GetTypeIndex<T0>());
            m_Any.Add(TypeManager.GetTypeIndex<T1>());
            return this;
        }

        public EntityQueryBuilder WithAny<T0, T1, T2>()
        {
            ValidateHasNoGroup();
            m_Any.Add(TypeManager.GetTypeIndex<T0>());
            m_Any.Add(TypeManager.GetTypeIndex<T1>());
            m_Any.Add(TypeManager.GetTypeIndex<T2>());
            return this;
        }

        public EntityQueryBuilder WithAny<T0, T1, T2, T3>()
        {
            ValidateHasNoGroup();
            m_Any.Add(TypeManager.GetTypeIndex<T0>());
            m_Any.Add(TypeManager.GetTypeIndex<T1>());
            m_Any.Add(TypeManager.GetTypeIndex<T2>());
            m_Any.Add(TypeManager.GetTypeIndex<T3>());
            return this;
        }

        public EntityQueryBuilder WithAny<T0, T1, T2, T3, T4>()
        {
            ValidateHasNoGroup();
            m_Any.Add(TypeManager.GetTypeIndex<T0>());
            m_Any.Add(TypeManager.GetTypeIndex<T1>());
            m_Any.Add(TypeManager.GetTypeIndex<T2>());
            m_Any.Add(TypeManager.GetTypeIndex<T3>());
            m_Any.Add(TypeManager.GetTypeIndex<T4>());
            return this;
        }

        public EntityQueryBuilder WithNone<T0>()
        {
            ValidateHasNoGroup();
            m_None.Add(TypeManager.GetTypeIndex<T0>());
            return this;
        }

        public EntityQueryBuilder WithNone<T0, T1>()
        {
            ValidateHasNoGroup();
            m_None.Add(TypeManager.GetTypeIndex<T0>());
            m_None.Add(TypeManager.GetTypeIndex<T1>());
            return this;
        }

        public EntityQueryBuilder WithNone<T0, T1, T2>()
        {
            ValidateHasNoGroup();
            m_None.Add(TypeManager.GetTypeIndex<T0>());
            m_None.Add(TypeManager.GetTypeIndex<T1>());
            m_None.Add(TypeManager.GetTypeIndex<T2>());
            return this;
        }

        public EntityQueryBuilder WithNone<T0, T1, T2, T3>()
        {
            ValidateHasNoGroup();
            m_None.Add(TypeManager.GetTypeIndex<T0>());
            m_None.Add(TypeManager.GetTypeIndex<T1>());
            m_None.Add(TypeManager.GetTypeIndex<T2>());
            m_None.Add(TypeManager.GetTypeIndex<T3>());
            return this;
        }

        public EntityQueryBuilder WithNone<T0, T1, T2, T3, T4>()
        {
            ValidateHasNoGroup();
            m_None.Add(TypeManager.GetTypeIndex<T0>());
            m_None.Add(TypeManager.GetTypeIndex<T1>());
            m_None.Add(TypeManager.GetTypeIndex<T2>());
            m_None.Add(TypeManager.GetTypeIndex<T3>());
            m_None.Add(TypeManager.GetTypeIndex<T4>());
            return this;
        }

        public EntityQueryBuilder WithAll<T0>()
        {
            ValidateHasNoGroup();
            m_All.Add(TypeManager.GetTypeIndex<T0>());
            return this;
        }

        public EntityQueryBuilder WithAll<T0, T1>()
        {
            ValidateHasNoGroup();
            m_All.Add(TypeManager.GetTypeIndex<T0>());
            m_All.Add(TypeManager.GetTypeIndex<T1>());
            return this;
        }

        public EntityQueryBuilder WithAll<T0, T1, T2>()
        {
            ValidateHasNoGroup();
            m_All.Add(TypeManager.GetTypeIndex<T0>());
            m_All.Add(TypeManager.GetTypeIndex<T1>());
            m_All.Add(TypeManager.GetTypeIndex<T2>());
            return this;
        }

        public EntityQueryBuilder WithAll<T0, T1, T2, T3>()
        {
            ValidateHasNoGroup();
            m_All.Add(TypeManager.GetTypeIndex<T0>());
            m_All.Add(TypeManager.GetTypeIndex<T1>());
            m_All.Add(TypeManager.GetTypeIndex<T2>());
            m_All.Add(TypeManager.GetTypeIndex<T3>());
            return this;
        }

        public EntityQueryBuilder WithAll<T0, T1, T2, T3, T4>()
        {
            ValidateHasNoGroup();
            m_All.Add(TypeManager.GetTypeIndex<T0>());
            m_All.Add(TypeManager.GetTypeIndex<T1>());
            m_All.Add(TypeManager.GetTypeIndex<T2>());
            m_All.Add(TypeManager.GetTypeIndex<T3>());
            m_All.Add(TypeManager.GetTypeIndex<T4>());
            return this;
        }

        // ** FOREACH **

        public delegate void F_E(Entity entity);

        public unsafe void ForEach(F_E action)
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    group = ResolveComponentGroup(null, 0);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i]);
                    }
                }
            }
        }

        public delegate void F_ED<T0>(Entity entity, ref T0 c0)
            where T0 : struct, IComponentData;

        public unsafe void ForEach<T0>(F_ED<T0> action)
            where T0 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[1];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();

                    group = ResolveComponentGroup(delegateTypes, 1);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i));
                    }
                }
            }
        }

        public delegate void F_D<T0>(ref T0 c0)
            where T0 : struct, IComponentData;

        public unsafe void ForEach<T0>(F_D<T0> action)
            where T0 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[1];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();

                    group = ResolveComponentGroup(delegateTypes, 1);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i));
                    }
                }
            }
        }

        public delegate void F_EC<T0>(Entity entity, T0 c0)
            where T0 : class;

        public unsafe void ForEach<T0>(F_EC<T0> action)
            where T0 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[1];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();

                    group = ResolveComponentGroup(delegateTypes, 1);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i]);
                    }
                }
            }
        }

        public delegate void F_C<T0>(T0 c0)
            where T0 : class;

        public unsafe void ForEach<T0>(F_C<T0> action)
            where T0 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[1];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();

                    group = ResolveComponentGroup(delegateTypes, 1);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i]);
                    }
                }
            }
        }

        public delegate void F_EB<T0>(Entity entity, DynamicBuffer<T0> c0)
            where T0 : struct, IBufferElementData;

        public unsafe void ForEach<T0>(F_EB<T0> action)
            where T0 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[1];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();

                    group = ResolveComponentGroup(delegateTypes, 1);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i]);
                    }
                }
            }
        }

        public delegate void F_B<T0>(DynamicBuffer<T0> c0)
            where T0 : struct, IBufferElementData;

        public unsafe void ForEach<T0>(F_B<T0> action)
            where T0 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[1];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();

                    group = ResolveComponentGroup(delegateTypes, 1);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i]);
                    }
                }
            }
        }

        public delegate void F_ES<T0>(Entity entity, T0 c0)
            where T0 : struct, ISharedComponentData;

        public unsafe void ForEach<T0>(F_ES<T0> action)
            where T0 : struct, ISharedComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[1];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();

                    group = ResolveComponentGroup(delegateTypes, 1);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0);
                    }
                }
            }
        }

        public delegate void F_S<T0>(T0 c0)
            where T0 : struct, ISharedComponentData;

        public unsafe void ForEach<T0>(F_S<T0> action)
            where T0 : struct, ISharedComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[1];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();

                    group = ResolveComponentGroup(delegateTypes, 1);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0);
                    }
                }
            }
        }

        public delegate void F_EDD<T0, T1>(Entity entity, ref T0 c0, ref T1 c1)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData;

        public unsafe void ForEach<T0, T1>(F_EDD<T0, T1> action)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[2];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();

                    group = ResolveComponentGroup(delegateTypes, 2);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i));
                    }
                }
            }
        }

        public delegate void F_DD<T0, T1>(ref T0 c0, ref T1 c1)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData;

        public unsafe void ForEach<T0, T1>(F_DD<T0, T1> action)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[2];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();

                    group = ResolveComponentGroup(delegateTypes, 2);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i));
                    }
                }
            }
        }

        public delegate void F_EDDD<T0, T1, T2>(Entity entity, ref T0 c0, ref T1 c1, ref T2 c2)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2>(F_EDDD<T0, T1, T2> action)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[3];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();

                    group = ResolveComponentGroup(delegateTypes, 3);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i));
                    }
                }
            }
        }

        public delegate void F_DDD<T0, T1, T2>(ref T0 c0, ref T1 c1, ref T2 c2)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2>(F_DDD<T0, T1, T2> action)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[3];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();

                    group = ResolveComponentGroup(delegateTypes, 3);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i));
                    }
                }
            }
        }

        public delegate void F_EDDDD<T0, T1, T2, T3>(Entity entity, ref T0 c0, ref T1 c1, ref T2 c2, ref T3 c3)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3>(F_EDDDD<T0, T1, T2, T3> action)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[4];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();

                    group = ResolveComponentGroup(delegateTypes, 4);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i));
                    }
                }
            }
        }

        public delegate void F_DDDD<T0, T1, T2, T3>(ref T0 c0, ref T1 c1, ref T2 c2, ref T3 c3)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3>(F_DDDD<T0, T1, T2, T3> action)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[4];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();

                    group = ResolveComponentGroup(delegateTypes, 4);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i));
                    }
                }
            }
        }

        public delegate void F_EDDDDD<T0, T1, T2, T3, T4>(Entity entity, ref T0 c0, ref T1 c1, ref T2 c2, ref T3 c3, ref T4 c4)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_EDDDDD<T0, T1, T2, T3, T4> action)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[5];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();

                    group = ResolveComponentGroup(delegateTypes, 5);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i));
                    }
                }
            }
        }

        public delegate void F_DDDDD<T0, T1, T2, T3, T4>(ref T0 c0, ref T1 c1, ref T2 c2, ref T3 c3, ref T4 c4)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_DDDDD<T0, T1, T2, T3, T4> action)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[5];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();

                    group = ResolveComponentGroup(delegateTypes, 5);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i));
                    }
                }
            }
        }

        public delegate void F_EDDDDDD<T0, T1, T2, T3, T4, T5>(Entity entity, ref T0 c0, ref T1 c1, ref T2 c2, ref T3 c3, ref T4 c4, ref T5 c5)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_EDDDDDD<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[6];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();
                    delegateTypes[5] = TypeManager.GetTypeIndex<T5>();

                    group = ResolveComponentGroup(delegateTypes, 6);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();
                        var array5 = chunk.GetNativeArray(chunkComponentType5).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i), ref UnsafeUtilityEx.ArrayElementAsRef<T5>(array5, i));
                    }
                }
            }
        }

        public delegate void F_DDDDDD<T0, T1, T2, T3, T4, T5>(ref T0 c0, ref T1 c1, ref T2 c2, ref T3 c3, ref T4 c4, ref T5 c5)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_DDDDDD<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[6];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();
                    delegateTypes[5] = TypeManager.GetTypeIndex<T5>();

                    group = ResolveComponentGroup(delegateTypes, 6);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();
                        var array5 = chunk.GetNativeArray(chunkComponentType5).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i), ref UnsafeUtilityEx.ArrayElementAsRef<T5>(array5, i));
                    }
                }
            }
        }

        public delegate void F_ECD<T0, T1>(Entity entity, T0 c0, ref T1 c1)
            where T0 : class
            where T1 : struct, IComponentData;

        public unsafe void ForEach<T0, T1>(F_ECD<T0, T1> action)
            where T0 : class
            where T1 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[2];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();

                    group = ResolveComponentGroup(delegateTypes, 2);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i));
                    }
                }
            }
        }

        public delegate void F_CD<T0, T1>(T0 c0, ref T1 c1)
            where T0 : class
            where T1 : struct, IComponentData;

        public unsafe void ForEach<T0, T1>(F_CD<T0, T1> action)
            where T0 : class
            where T1 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[2];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();

                    group = ResolveComponentGroup(delegateTypes, 2);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i));
                    }
                }
            }
        }

        public delegate void F_ECDD<T0, T1, T2>(Entity entity, T0 c0, ref T1 c1, ref T2 c2)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2>(F_ECDD<T0, T1, T2> action)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[3];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();

                    group = ResolveComponentGroup(delegateTypes, 3);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i));
                    }
                }
            }
        }

        public delegate void F_CDD<T0, T1, T2>(T0 c0, ref T1 c1, ref T2 c2)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2>(F_CDD<T0, T1, T2> action)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[3];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();

                    group = ResolveComponentGroup(delegateTypes, 3);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i));
                    }
                }
            }
        }

        public delegate void F_ECDDD<T0, T1, T2, T3>(Entity entity, T0 c0, ref T1 c1, ref T2 c2, ref T3 c3)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3>(F_ECDDD<T0, T1, T2, T3> action)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[4];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();

                    group = ResolveComponentGroup(delegateTypes, 4);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i));
                    }
                }
            }
        }

        public delegate void F_CDDD<T0, T1, T2, T3>(T0 c0, ref T1 c1, ref T2 c2, ref T3 c3)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3>(F_CDDD<T0, T1, T2, T3> action)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[4];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();

                    group = ResolveComponentGroup(delegateTypes, 4);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i));
                    }
                }
            }
        }

        public delegate void F_ECDDDD<T0, T1, T2, T3, T4>(Entity entity, T0 c0, ref T1 c1, ref T2 c2, ref T3 c3, ref T4 c4)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_ECDDDD<T0, T1, T2, T3, T4> action)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[5];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();

                    group = ResolveComponentGroup(delegateTypes, 5);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i));
                    }
                }
            }
        }

        public delegate void F_CDDDD<T0, T1, T2, T3, T4>(T0 c0, ref T1 c1, ref T2 c2, ref T3 c3, ref T4 c4)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_CDDDD<T0, T1, T2, T3, T4> action)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[5];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();

                    group = ResolveComponentGroup(delegateTypes, 5);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i));
                    }
                }
            }
        }

        public delegate void F_ECDDDDD<T0, T1, T2, T3, T4, T5>(Entity entity, T0 c0, ref T1 c1, ref T2 c2, ref T3 c3, ref T4 c4, ref T5 c5)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_ECDDDDD<T0, T1, T2, T3, T4, T5> action)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[6];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();
                    delegateTypes[5] = TypeManager.GetTypeIndex<T5>();

                    group = ResolveComponentGroup(delegateTypes, 6);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();
                        var array5 = chunk.GetNativeArray(chunkComponentType5).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i), ref UnsafeUtilityEx.ArrayElementAsRef<T5>(array5, i));
                    }
                }
            }
        }

        public delegate void F_CDDDDD<T0, T1, T2, T3, T4, T5>(T0 c0, ref T1 c1, ref T2 c2, ref T3 c3, ref T4 c4, ref T5 c5)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_CDDDDD<T0, T1, T2, T3, T4, T5> action)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[6];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();
                    delegateTypes[5] = TypeManager.GetTypeIndex<T5>();

                    group = ResolveComponentGroup(delegateTypes, 6);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();
                        var array5 = chunk.GetNativeArray(chunkComponentType5).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i), ref UnsafeUtilityEx.ArrayElementAsRef<T5>(array5, i));
                    }
                }
            }
        }

        public delegate void F_EBD<T0, T1>(Entity entity, DynamicBuffer<T0> c0, ref T1 c1)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData;

        public unsafe void ForEach<T0, T1>(F_EBD<T0, T1> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[2];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();

                    group = ResolveComponentGroup(delegateTypes, 2);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i));
                    }
                }
            }
        }

        public delegate void F_BD<T0, T1>(DynamicBuffer<T0> c0, ref T1 c1)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData;

        public unsafe void ForEach<T0, T1>(F_BD<T0, T1> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[2];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();

                    group = ResolveComponentGroup(delegateTypes, 2);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i));
                    }
                }
            }
        }

        public delegate void F_EBDD<T0, T1, T2>(Entity entity, DynamicBuffer<T0> c0, ref T1 c1, ref T2 c2)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2>(F_EBDD<T0, T1, T2> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[3];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();

                    group = ResolveComponentGroup(delegateTypes, 3);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i));
                    }
                }
            }
        }

        public delegate void F_BDD<T0, T1, T2>(DynamicBuffer<T0> c0, ref T1 c1, ref T2 c2)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2>(F_BDD<T0, T1, T2> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[3];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();

                    group = ResolveComponentGroup(delegateTypes, 3);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i));
                    }
                }
            }
        }

        public delegate void F_EBDDD<T0, T1, T2, T3>(Entity entity, DynamicBuffer<T0> c0, ref T1 c1, ref T2 c2, ref T3 c3)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3>(F_EBDDD<T0, T1, T2, T3> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[4];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();

                    group = ResolveComponentGroup(delegateTypes, 4);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i));
                    }
                }
            }
        }

        public delegate void F_BDDD<T0, T1, T2, T3>(DynamicBuffer<T0> c0, ref T1 c1, ref T2 c2, ref T3 c3)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3>(F_BDDD<T0, T1, T2, T3> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[4];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();

                    group = ResolveComponentGroup(delegateTypes, 4);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i));
                    }
                }
            }
        }

        public delegate void F_EBDDDD<T0, T1, T2, T3, T4>(Entity entity, DynamicBuffer<T0> c0, ref T1 c1, ref T2 c2, ref T3 c3, ref T4 c4)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_EBDDDD<T0, T1, T2, T3, T4> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[5];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();

                    group = ResolveComponentGroup(delegateTypes, 5);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i));
                    }
                }
            }
        }

        public delegate void F_BDDDD<T0, T1, T2, T3, T4>(DynamicBuffer<T0> c0, ref T1 c1, ref T2 c2, ref T3 c3, ref T4 c4)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_BDDDD<T0, T1, T2, T3, T4> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[5];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();

                    group = ResolveComponentGroup(delegateTypes, 5);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i));
                    }
                }
            }
        }

        public delegate void F_EBDDDDD<T0, T1, T2, T3, T4, T5>(Entity entity, DynamicBuffer<T0> c0, ref T1 c1, ref T2 c2, ref T3 c3, ref T4 c4, ref T5 c5)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_EBDDDDD<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[6];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();
                    delegateTypes[5] = TypeManager.GetTypeIndex<T5>();

                    group = ResolveComponentGroup(delegateTypes, 6);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();
                        var array5 = chunk.GetNativeArray(chunkComponentType5).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i), ref UnsafeUtilityEx.ArrayElementAsRef<T5>(array5, i));
                    }
                }
            }
        }

        public delegate void F_BDDDDD<T0, T1, T2, T3, T4, T5>(DynamicBuffer<T0> c0, ref T1 c1, ref T2 c2, ref T3 c3, ref T4 c4, ref T5 c5)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_BDDDDD<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[6];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();
                    delegateTypes[5] = TypeManager.GetTypeIndex<T5>();

                    group = ResolveComponentGroup(delegateTypes, 6);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();
                        var array5 = chunk.GetNativeArray(chunkComponentType5).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i), ref UnsafeUtilityEx.ArrayElementAsRef<T5>(array5, i));
                    }
                }
            }
        }

        public delegate void F_ESD<T0, T1>(Entity entity, T0 c0, ref T1 c1)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData;

        public unsafe void ForEach<T0, T1>(F_ESD<T0, T1> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[2];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();

                    group = ResolveComponentGroup(delegateTypes, 2);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0, ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i));
                    }
                }
            }
        }

        public delegate void F_SD<T0, T1>(T0 c0, ref T1 c1)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData;

        public unsafe void ForEach<T0, T1>(F_SD<T0, T1> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[2];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();

                    group = ResolveComponentGroup(delegateTypes, 2);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0, ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i));
                    }
                }
            }
        }

        public delegate void F_ESDD<T0, T1, T2>(Entity entity, T0 c0, ref T1 c1, ref T2 c2)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2>(F_ESDD<T0, T1, T2> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[3];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();

                    group = ResolveComponentGroup(delegateTypes, 3);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0, ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i));
                    }
                }
            }
        }

        public delegate void F_SDD<T0, T1, T2>(T0 c0, ref T1 c1, ref T2 c2)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2>(F_SDD<T0, T1, T2> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[3];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();

                    group = ResolveComponentGroup(delegateTypes, 3);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0, ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i));
                    }
                }
            }
        }

        public delegate void F_ESDDD<T0, T1, T2, T3>(Entity entity, T0 c0, ref T1 c1, ref T2 c2, ref T3 c3)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3>(F_ESDDD<T0, T1, T2, T3> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[4];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();

                    group = ResolveComponentGroup(delegateTypes, 4);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0, ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i));
                    }
                }
            }
        }

        public delegate void F_SDDD<T0, T1, T2, T3>(T0 c0, ref T1 c1, ref T2 c2, ref T3 c3)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3>(F_SDDD<T0, T1, T2, T3> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[4];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();

                    group = ResolveComponentGroup(delegateTypes, 4);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0, ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i));
                    }
                }
            }
        }

        public delegate void F_ESDDDD<T0, T1, T2, T3, T4>(Entity entity, T0 c0, ref T1 c1, ref T2 c2, ref T3 c3, ref T4 c4)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_ESDDDD<T0, T1, T2, T3, T4> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[5];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();

                    group = ResolveComponentGroup(delegateTypes, 5);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0, ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i));
                    }
                }
            }
        }

        public delegate void F_SDDDD<T0, T1, T2, T3, T4>(T0 c0, ref T1 c1, ref T2 c2, ref T3 c3, ref T4 c4)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_SDDDD<T0, T1, T2, T3, T4> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[5];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();

                    group = ResolveComponentGroup(delegateTypes, 5);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0, ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i));
                    }
                }
            }
        }

        public delegate void F_ESDDDDD<T0, T1, T2, T3, T4, T5>(Entity entity, T0 c0, ref T1 c1, ref T2 c2, ref T3 c3, ref T4 c4, ref T5 c5)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_ESDDDDD<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[6];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();
                    delegateTypes[5] = TypeManager.GetTypeIndex<T5>();

                    group = ResolveComponentGroup(delegateTypes, 6);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();
                        var array5 = chunk.GetNativeArray(chunkComponentType5).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0, ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i), ref UnsafeUtilityEx.ArrayElementAsRef<T5>(array5, i));
                    }
                }
            }
        }

        public delegate void F_SDDDDD<T0, T1, T2, T3, T4, T5>(T0 c0, ref T1 c1, ref T2 c2, ref T3 c3, ref T4 c4, ref T5 c5)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_SDDDDD<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[6];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();
                    delegateTypes[5] = TypeManager.GetTypeIndex<T5>();

                    group = ResolveComponentGroup(delegateTypes, 6);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>(false);

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();
                        var array5 = chunk.GetNativeArray(chunkComponentType5).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0, ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i), ref UnsafeUtilityEx.ArrayElementAsRef<T5>(array5, i));
                    }
                }
            }
        }

        public delegate void F_EDC<T0, T1>(Entity entity, ref T0 c0, T1 c1)
            where T0 : struct, IComponentData
            where T1 : class;

        public unsafe void ForEach<T0, T1>(F_EDC<T0, T1> action)
            where T0 : struct, IComponentData
            where T1 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[2];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();

                    group = ResolveComponentGroup(delegateTypes, 2);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i]);
                    }
                }
            }
        }

        public delegate void F_DC<T0, T1>(ref T0 c0, T1 c1)
            where T0 : struct, IComponentData
            where T1 : class;

        public unsafe void ForEach<T0, T1>(F_DC<T0, T1> action)
            where T0 : struct, IComponentData
            where T1 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[2];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();

                    group = ResolveComponentGroup(delegateTypes, 2);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i]);
                    }
                }
            }
        }

        public delegate void F_EDCC<T0, T1, T2>(Entity entity, ref T0 c0, T1 c1, T2 c2)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class;

        public unsafe void ForEach<T0, T1, T2>(F_EDCC<T0, T1, T2> action)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[3];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();

                    group = ResolveComponentGroup(delegateTypes, 3);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i], array2[i]);
                    }
                }
            }
        }

        public delegate void F_DCC<T0, T1, T2>(ref T0 c0, T1 c1, T2 c2)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class;

        public unsafe void ForEach<T0, T1, T2>(F_DCC<T0, T1, T2> action)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[3];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();

                    group = ResolveComponentGroup(delegateTypes, 3);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i], array2[i]);
                    }
                }
            }
        }

        public delegate void F_EDCCC<T0, T1, T2, T3>(Entity entity, ref T0 c0, T1 c1, T2 c2, T3 c3)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
            where T3 : class;

        public unsafe void ForEach<T0, T1, T2, T3>(F_EDCCC<T0, T1, T2, T3> action)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
            where T3 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[4];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();

                    group = ResolveComponentGroup(delegateTypes, 4);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i], array2[i], array3[i]);
                    }
                }
            }
        }

        public delegate void F_DCCC<T0, T1, T2, T3>(ref T0 c0, T1 c1, T2 c2, T3 c3)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
            where T3 : class;

        public unsafe void ForEach<T0, T1, T2, T3>(F_DCCC<T0, T1, T2, T3> action)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
            where T3 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[4];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();

                    group = ResolveComponentGroup(delegateTypes, 4);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i], array2[i], array3[i]);
                    }
                }
            }
        }

        public delegate void F_EDCCCC<T0, T1, T2, T3, T4>(Entity entity, ref T0 c0, T1 c1, T2 c2, T3 c3, T4 c4)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_EDCCCC<T0, T1, T2, T3, T4> action)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[5];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();

                    group = ResolveComponentGroup(delegateTypes, 5);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i], array2[i], array3[i], array4[i]);
                    }
                }
            }
        }

        public delegate void F_DCCCC<T0, T1, T2, T3, T4>(ref T0 c0, T1 c1, T2 c2, T3 c3, T4 c4)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_DCCCC<T0, T1, T2, T3, T4> action)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[5];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();

                    group = ResolveComponentGroup(delegateTypes, 5);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i], array2[i], array3[i], array4[i]);
                    }
                }
            }
        }

        public delegate void F_EDCCCCC<T0, T1, T2, T3, T4, T5>(Entity entity, ref T0 c0, T1 c1, T2 c2, T3 c3, T4 c4, T5 c5)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_EDCCCCC<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[6];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();
                    delegateTypes[5] = TypeManager.GetTypeIndex<T5>();

                    group = ResolveComponentGroup(delegateTypes, 6);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);
                        var array5 = chunk.GetComponentObjects(chunkComponentType5, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i], array2[i], array3[i], array4[i], array5[i]);
                    }
                }
            }
        }

        public delegate void F_DCCCCC<T0, T1, T2, T3, T4, T5>(ref T0 c0, T1 c1, T2 c2, T3 c3, T4 c4, T5 c5)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_DCCCCC<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[6];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();
                    delegateTypes[5] = TypeManager.GetTypeIndex<T5>();

                    group = ResolveComponentGroup(delegateTypes, 6);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);
                        var array5 = chunk.GetComponentObjects(chunkComponentType5, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i], array2[i], array3[i], array4[i], array5[i]);
                    }
                }
            }
        }

        public delegate void F_ECC<T0, T1>(Entity entity, T0 c0, T1 c1)
            where T0 : class
            where T1 : class;

        public unsafe void ForEach<T0, T1>(F_ECC<T0, T1> action)
            where T0 : class
            where T1 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[2];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();

                    group = ResolveComponentGroup(delegateTypes, 2);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i]);
                    }
                }
            }
        }

        public delegate void F_CC<T0, T1>(T0 c0, T1 c1)
            where T0 : class
            where T1 : class;

        public unsafe void ForEach<T0, T1>(F_CC<T0, T1> action)
            where T0 : class
            where T1 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[2];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();

                    group = ResolveComponentGroup(delegateTypes, 2);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i]);
                    }
                }
            }
        }

        public delegate void F_ECCC<T0, T1, T2>(Entity entity, T0 c0, T1 c1, T2 c2)
            where T0 : class
            where T1 : class
            where T2 : class;

        public unsafe void ForEach<T0, T1, T2>(F_ECCC<T0, T1, T2> action)
            where T0 : class
            where T1 : class
            where T2 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[3];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();

                    group = ResolveComponentGroup(delegateTypes, 3);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i], array2[i]);
                    }
                }
            }
        }

        public delegate void F_CCC<T0, T1, T2>(T0 c0, T1 c1, T2 c2)
            where T0 : class
            where T1 : class
            where T2 : class;

        public unsafe void ForEach<T0, T1, T2>(F_CCC<T0, T1, T2> action)
            where T0 : class
            where T1 : class
            where T2 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[3];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();

                    group = ResolveComponentGroup(delegateTypes, 3);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i], array2[i]);
                    }
                }
            }
        }

        public delegate void F_ECCCC<T0, T1, T2, T3>(Entity entity, T0 c0, T1 c1, T2 c2, T3 c3)
            where T0 : class
            where T1 : class
            where T2 : class
            where T3 : class;

        public unsafe void ForEach<T0, T1, T2, T3>(F_ECCCC<T0, T1, T2, T3> action)
            where T0 : class
            where T1 : class
            where T2 : class
            where T3 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[4];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();

                    group = ResolveComponentGroup(delegateTypes, 4);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i], array2[i], array3[i]);
                    }
                }
            }
        }

        public delegate void F_CCCC<T0, T1, T2, T3>(T0 c0, T1 c1, T2 c2, T3 c3)
            where T0 : class
            where T1 : class
            where T2 : class
            where T3 : class;

        public unsafe void ForEach<T0, T1, T2, T3>(F_CCCC<T0, T1, T2, T3> action)
            where T0 : class
            where T1 : class
            where T2 : class
            where T3 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[4];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();

                    group = ResolveComponentGroup(delegateTypes, 4);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i], array2[i], array3[i]);
                    }
                }
            }
        }

        public delegate void F_ECCCCC<T0, T1, T2, T3, T4>(Entity entity, T0 c0, T1 c1, T2 c2, T3 c3, T4 c4)
            where T0 : class
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_ECCCCC<T0, T1, T2, T3, T4> action)
            where T0 : class
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[5];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();

                    group = ResolveComponentGroup(delegateTypes, 5);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i], array2[i], array3[i], array4[i]);
                    }
                }
            }
        }

        public delegate void F_CCCCC<T0, T1, T2, T3, T4>(T0 c0, T1 c1, T2 c2, T3 c3, T4 c4)
            where T0 : class
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_CCCCC<T0, T1, T2, T3, T4> action)
            where T0 : class
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[5];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();

                    group = ResolveComponentGroup(delegateTypes, 5);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i], array2[i], array3[i], array4[i]);
                    }
                }
            }
        }

        public delegate void F_ECCCCCC<T0, T1, T2, T3, T4, T5>(Entity entity, T0 c0, T1 c1, T2 c2, T3 c3, T4 c4, T5 c5)
            where T0 : class
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_ECCCCCC<T0, T1, T2, T3, T4, T5> action)
            where T0 : class
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[6];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();
                    delegateTypes[5] = TypeManager.GetTypeIndex<T5>();

                    group = ResolveComponentGroup(delegateTypes, 6);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);
                        var array5 = chunk.GetComponentObjects(chunkComponentType5, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i], array2[i], array3[i], array4[i], array5[i]);
                    }
                }
            }
        }

        public delegate void F_CCCCCC<T0, T1, T2, T3, T4, T5>(T0 c0, T1 c1, T2 c2, T3 c3, T4 c4, T5 c5)
            where T0 : class
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_CCCCCC<T0, T1, T2, T3, T4, T5> action)
            where T0 : class
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[6];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();
                    delegateTypes[5] = TypeManager.GetTypeIndex<T5>();

                    group = ResolveComponentGroup(delegateTypes, 6);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);
                        var array5 = chunk.GetComponentObjects(chunkComponentType5, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i], array2[i], array3[i], array4[i], array5[i]);
                    }
                }
            }
        }

        public delegate void F_EBC<T0, T1>(Entity entity, DynamicBuffer<T0> c0, T1 c1)
            where T0 : struct, IBufferElementData
            where T1 : class;

        public unsafe void ForEach<T0, T1>(F_EBC<T0, T1> action)
            where T0 : struct, IBufferElementData
            where T1 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[2];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();

                    group = ResolveComponentGroup(delegateTypes, 2);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i]);
                    }
                }
            }
        }

        public delegate void F_BC<T0, T1>(DynamicBuffer<T0> c0, T1 c1)
            where T0 : struct, IBufferElementData
            where T1 : class;

        public unsafe void ForEach<T0, T1>(F_BC<T0, T1> action)
            where T0 : struct, IBufferElementData
            where T1 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[2];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();

                    group = ResolveComponentGroup(delegateTypes, 2);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i]);
                    }
                }
            }
        }

        public delegate void F_EBCC<T0, T1, T2>(Entity entity, DynamicBuffer<T0> c0, T1 c1, T2 c2)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class;

        public unsafe void ForEach<T0, T1, T2>(F_EBCC<T0, T1, T2> action)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[3];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();

                    group = ResolveComponentGroup(delegateTypes, 3);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i], array2[i]);
                    }
                }
            }
        }

        public delegate void F_BCC<T0, T1, T2>(DynamicBuffer<T0> c0, T1 c1, T2 c2)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class;

        public unsafe void ForEach<T0, T1, T2>(F_BCC<T0, T1, T2> action)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[3];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();

                    group = ResolveComponentGroup(delegateTypes, 3);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i], array2[i]);
                    }
                }
            }
        }

        public delegate void F_EBCCC<T0, T1, T2, T3>(Entity entity, DynamicBuffer<T0> c0, T1 c1, T2 c2, T3 c3)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
            where T3 : class;

        public unsafe void ForEach<T0, T1, T2, T3>(F_EBCCC<T0, T1, T2, T3> action)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
            where T3 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[4];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();

                    group = ResolveComponentGroup(delegateTypes, 4);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i], array2[i], array3[i]);
                    }
                }
            }
        }

        public delegate void F_BCCC<T0, T1, T2, T3>(DynamicBuffer<T0> c0, T1 c1, T2 c2, T3 c3)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
            where T3 : class;

        public unsafe void ForEach<T0, T1, T2, T3>(F_BCCC<T0, T1, T2, T3> action)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
            where T3 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[4];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();

                    group = ResolveComponentGroup(delegateTypes, 4);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i], array2[i], array3[i]);
                    }
                }
            }
        }

        public delegate void F_EBCCCC<T0, T1, T2, T3, T4>(Entity entity, DynamicBuffer<T0> c0, T1 c1, T2 c2, T3 c3, T4 c4)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_EBCCCC<T0, T1, T2, T3, T4> action)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[5];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();

                    group = ResolveComponentGroup(delegateTypes, 5);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i], array2[i], array3[i], array4[i]);
                    }
                }
            }
        }

        public delegate void F_BCCCC<T0, T1, T2, T3, T4>(DynamicBuffer<T0> c0, T1 c1, T2 c2, T3 c3, T4 c4)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_BCCCC<T0, T1, T2, T3, T4> action)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[5];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();

                    group = ResolveComponentGroup(delegateTypes, 5);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i], array2[i], array3[i], array4[i]);
                    }
                }
            }
        }

        public delegate void F_EBCCCCC<T0, T1, T2, T3, T4, T5>(Entity entity, DynamicBuffer<T0> c0, T1 c1, T2 c2, T3 c3, T4 c4, T5 c5)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_EBCCCCC<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[6];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();
                    delegateTypes[5] = TypeManager.GetTypeIndex<T5>();

                    group = ResolveComponentGroup(delegateTypes, 6);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);
                        var array5 = chunk.GetComponentObjects(chunkComponentType5, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i], array2[i], array3[i], array4[i], array5[i]);
                    }
                }
            }
        }

        public delegate void F_BCCCCC<T0, T1, T2, T3, T4, T5>(DynamicBuffer<T0> c0, T1 c1, T2 c2, T3 c3, T4 c4, T5 c5)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_BCCCCC<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[6];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();
                    delegateTypes[5] = TypeManager.GetTypeIndex<T5>();

                    group = ResolveComponentGroup(delegateTypes, 6);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);
                        var array5 = chunk.GetComponentObjects(chunkComponentType5, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i], array2[i], array3[i], array4[i], array5[i]);
                    }
                }
            }
        }

        public delegate void F_ESC<T0, T1>(Entity entity, T0 c0, T1 c1)
            where T0 : struct, ISharedComponentData
            where T1 : class;

        public unsafe void ForEach<T0, T1>(F_ESC<T0, T1> action)
            where T0 : struct, ISharedComponentData
            where T1 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[2];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();

                    group = ResolveComponentGroup(delegateTypes, 2);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0, array1[i]);
                    }
                }
            }
        }

        public delegate void F_SC<T0, T1>(T0 c0, T1 c1)
            where T0 : struct, ISharedComponentData
            where T1 : class;

        public unsafe void ForEach<T0, T1>(F_SC<T0, T1> action)
            where T0 : struct, ISharedComponentData
            where T1 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[2];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();

                    group = ResolveComponentGroup(delegateTypes, 2);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0, array1[i]);
                    }
                }
            }
        }

        public delegate void F_ESCC<T0, T1, T2>(Entity entity, T0 c0, T1 c1, T2 c2)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class;

        public unsafe void ForEach<T0, T1, T2>(F_ESCC<T0, T1, T2> action)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[3];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();

                    group = ResolveComponentGroup(delegateTypes, 3);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0, array1[i], array2[i]);
                    }
                }
            }
        }

        public delegate void F_SCC<T0, T1, T2>(T0 c0, T1 c1, T2 c2)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class;

        public unsafe void ForEach<T0, T1, T2>(F_SCC<T0, T1, T2> action)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[3];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();

                    group = ResolveComponentGroup(delegateTypes, 3);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0, array1[i], array2[i]);
                    }
                }
            }
        }

        public delegate void F_ESCCC<T0, T1, T2, T3>(Entity entity, T0 c0, T1 c1, T2 c2, T3 c3)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
            where T3 : class;

        public unsafe void ForEach<T0, T1, T2, T3>(F_ESCCC<T0, T1, T2, T3> action)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
            where T3 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[4];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();

                    group = ResolveComponentGroup(delegateTypes, 4);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0, array1[i], array2[i], array3[i]);
                    }
                }
            }
        }

        public delegate void F_SCCC<T0, T1, T2, T3>(T0 c0, T1 c1, T2 c2, T3 c3)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
            where T3 : class;

        public unsafe void ForEach<T0, T1, T2, T3>(F_SCCC<T0, T1, T2, T3> action)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
            where T3 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[4];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();

                    group = ResolveComponentGroup(delegateTypes, 4);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0, array1[i], array2[i], array3[i]);
                    }
                }
            }
        }

        public delegate void F_ESCCCC<T0, T1, T2, T3, T4>(Entity entity, T0 c0, T1 c1, T2 c2, T3 c3, T4 c4)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_ESCCCC<T0, T1, T2, T3, T4> action)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[5];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();

                    group = ResolveComponentGroup(delegateTypes, 5);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0, array1[i], array2[i], array3[i], array4[i]);
                    }
                }
            }
        }

        public delegate void F_SCCCC<T0, T1, T2, T3, T4>(T0 c0, T1 c1, T2 c2, T3 c3, T4 c4)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_SCCCC<T0, T1, T2, T3, T4> action)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[5];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();

                    group = ResolveComponentGroup(delegateTypes, 5);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0, array1[i], array2[i], array3[i], array4[i]);
                    }
                }
            }
        }

        public delegate void F_ESCCCCC<T0, T1, T2, T3, T4, T5>(Entity entity, T0 c0, T1 c1, T2 c2, T3 c3, T4 c4, T5 c5)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_ESCCCCC<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[6];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();
                    delegateTypes[5] = TypeManager.GetTypeIndex<T5>();

                    group = ResolveComponentGroup(delegateTypes, 6);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);
                        var array5 = chunk.GetComponentObjects(chunkComponentType5, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0, array1[i], array2[i], array3[i], array4[i], array5[i]);
                    }
                }
            }
        }

        public delegate void F_SCCCCC<T0, T1, T2, T3, T4, T5>(T0 c0, T1 c1, T2 c2, T3 c3, T4 c4, T5 c5)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_SCCCCC<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var group = m_Group;
                if (group == null)
                {
                    var delegateTypes = stackalloc int[6];
                    delegateTypes[0] = TypeManager.GetTypeIndex<T0>();
                    delegateTypes[1] = TypeManager.GetTypeIndex<T1>();
                    delegateTypes[2] = TypeManager.GetTypeIndex<T2>();
                    delegateTypes[3] = TypeManager.GetTypeIndex<T3>();
                    delegateTypes[4] = TypeManager.GetTypeIndex<T4>();
                    delegateTypes[5] = TypeManager.GetTypeIndex<T5>();

                    group = ResolveComponentGroup(delegateTypes, 6);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>();

                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);
                        var array5 = chunk.GetComponentObjects(chunkComponentType5, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0, array1[i], array2[i], array3[i], array4[i], array5[i]);
                    }
                }
            }
        }

    }

	// BACK-COMPAT - TO BE REMOVED

	public partial class ComponentSystem
	{
        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach(EntityQueryBuilder.F_E action, ComponentGroup group = null)
		    
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0>(EntityQueryBuilder.F_ED<T0> action, ComponentGroup group = null)
		    where T0 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0>(EntityQueryBuilder.F_D<T0> action, ComponentGroup group = null)
		    where T0 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0>(EntityQueryBuilder.F_EC<T0> action, ComponentGroup group = null)
		    where T0 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0>(EntityQueryBuilder.F_C<T0> action, ComponentGroup group = null)
		    where T0 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0>(EntityQueryBuilder.F_EB<T0> action, ComponentGroup group = null)
		    where T0 : struct, IBufferElementData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0>(EntityQueryBuilder.F_B<T0> action, ComponentGroup group = null)
		    where T0 : struct, IBufferElementData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0>(EntityQueryBuilder.F_ES<T0> action, ComponentGroup group = null)
		    where T0 : struct, ISharedComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0>(EntityQueryBuilder.F_S<T0> action, ComponentGroup group = null)
		    where T0 : struct, ISharedComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_EDD<T0, T1> action, ComponentGroup group = null)
		    where T0 : struct, IComponentData where T1 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_DD<T0, T1> action, ComponentGroup group = null)
		    where T0 : struct, IComponentData where T1 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_EDDD<T0, T1, T2> action, ComponentGroup group = null)
		    where T0 : struct, IComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_DDD<T0, T1, T2> action, ComponentGroup group = null)
		    where T0 : struct, IComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_EDDDD<T0, T1, T2, T3> action, ComponentGroup group = null)
		    where T0 : struct, IComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_DDDD<T0, T1, T2, T3> action, ComponentGroup group = null)
		    where T0 : struct, IComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_EDDDDD<T0, T1, T2, T3, T4> action, ComponentGroup group = null)
		    where T0 : struct, IComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_DDDDD<T0, T1, T2, T3, T4> action, ComponentGroup group = null)
		    where T0 : struct, IComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_EDDDDDD<T0, T1, T2, T3, T4, T5> action, ComponentGroup group = null)
		    where T0 : struct, IComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData where T5 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_DDDDDD<T0, T1, T2, T3, T4, T5> action, ComponentGroup group = null)
		    where T0 : struct, IComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData where T5 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_ECD<T0, T1> action, ComponentGroup group = null)
		    where T0 : class where T1 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_CD<T0, T1> action, ComponentGroup group = null)
		    where T0 : class where T1 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_ECDD<T0, T1, T2> action, ComponentGroup group = null)
		    where T0 : class where T1 : struct, IComponentData where T2 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_CDD<T0, T1, T2> action, ComponentGroup group = null)
		    where T0 : class where T1 : struct, IComponentData where T2 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_ECDDD<T0, T1, T2, T3> action, ComponentGroup group = null)
		    where T0 : class where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_CDDD<T0, T1, T2, T3> action, ComponentGroup group = null)
		    where T0 : class where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_ECDDDD<T0, T1, T2, T3, T4> action, ComponentGroup group = null)
		    where T0 : class where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_CDDDD<T0, T1, T2, T3, T4> action, ComponentGroup group = null)
		    where T0 : class where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_ECDDDDD<T0, T1, T2, T3, T4, T5> action, ComponentGroup group = null)
		    where T0 : class where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData where T5 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_CDDDDD<T0, T1, T2, T3, T4, T5> action, ComponentGroup group = null)
		    where T0 : class where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData where T5 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_EBD<T0, T1> action, ComponentGroup group = null)
		    where T0 : struct, IBufferElementData where T1 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_BD<T0, T1> action, ComponentGroup group = null)
		    where T0 : struct, IBufferElementData where T1 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_EBDD<T0, T1, T2> action, ComponentGroup group = null)
		    where T0 : struct, IBufferElementData where T1 : struct, IComponentData where T2 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_BDD<T0, T1, T2> action, ComponentGroup group = null)
		    where T0 : struct, IBufferElementData where T1 : struct, IComponentData where T2 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_EBDDD<T0, T1, T2, T3> action, ComponentGroup group = null)
		    where T0 : struct, IBufferElementData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_BDDD<T0, T1, T2, T3> action, ComponentGroup group = null)
		    where T0 : struct, IBufferElementData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_EBDDDD<T0, T1, T2, T3, T4> action, ComponentGroup group = null)
		    where T0 : struct, IBufferElementData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_BDDDD<T0, T1, T2, T3, T4> action, ComponentGroup group = null)
		    where T0 : struct, IBufferElementData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_EBDDDDD<T0, T1, T2, T3, T4, T5> action, ComponentGroup group = null)
		    where T0 : struct, IBufferElementData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData where T5 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_BDDDDD<T0, T1, T2, T3, T4, T5> action, ComponentGroup group = null)
		    where T0 : struct, IBufferElementData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData where T5 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_ESD<T0, T1> action, ComponentGroup group = null)
		    where T0 : struct, ISharedComponentData where T1 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_SD<T0, T1> action, ComponentGroup group = null)
		    where T0 : struct, ISharedComponentData where T1 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_ESDD<T0, T1, T2> action, ComponentGroup group = null)
		    where T0 : struct, ISharedComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_SDD<T0, T1, T2> action, ComponentGroup group = null)
		    where T0 : struct, ISharedComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_ESDDD<T0, T1, T2, T3> action, ComponentGroup group = null)
		    where T0 : struct, ISharedComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_SDDD<T0, T1, T2, T3> action, ComponentGroup group = null)
		    where T0 : struct, ISharedComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_ESDDDD<T0, T1, T2, T3, T4> action, ComponentGroup group = null)
		    where T0 : struct, ISharedComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_SDDDD<T0, T1, T2, T3, T4> action, ComponentGroup group = null)
		    where T0 : struct, ISharedComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_ESDDDDD<T0, T1, T2, T3, T4, T5> action, ComponentGroup group = null)
		    where T0 : struct, ISharedComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData where T5 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_SDDDDD<T0, T1, T2, T3, T4, T5> action, ComponentGroup group = null)
		    where T0 : struct, ISharedComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData where T5 : struct, IComponentData
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_EDC<T0, T1> action, ComponentGroup group = null)
		    where T0 : struct, IComponentData where T1 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_DC<T0, T1> action, ComponentGroup group = null)
		    where T0 : struct, IComponentData where T1 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_EDCC<T0, T1, T2> action, ComponentGroup group = null)
		    where T0 : struct, IComponentData where T1 : class where T2 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_DCC<T0, T1, T2> action, ComponentGroup group = null)
		    where T0 : struct, IComponentData where T1 : class where T2 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_EDCCC<T0, T1, T2, T3> action, ComponentGroup group = null)
		    where T0 : struct, IComponentData where T1 : class where T2 : class where T3 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_DCCC<T0, T1, T2, T3> action, ComponentGroup group = null)
		    where T0 : struct, IComponentData where T1 : class where T2 : class where T3 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_EDCCCC<T0, T1, T2, T3, T4> action, ComponentGroup group = null)
		    where T0 : struct, IComponentData where T1 : class where T2 : class where T3 : class where T4 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_DCCCC<T0, T1, T2, T3, T4> action, ComponentGroup group = null)
		    where T0 : struct, IComponentData where T1 : class where T2 : class where T3 : class where T4 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_EDCCCCC<T0, T1, T2, T3, T4, T5> action, ComponentGroup group = null)
		    where T0 : struct, IComponentData where T1 : class where T2 : class where T3 : class where T4 : class where T5 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_DCCCCC<T0, T1, T2, T3, T4, T5> action, ComponentGroup group = null)
		    where T0 : struct, IComponentData where T1 : class where T2 : class where T3 : class where T4 : class where T5 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_ECC<T0, T1> action, ComponentGroup group = null)
		    where T0 : class where T1 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_CC<T0, T1> action, ComponentGroup group = null)
		    where T0 : class where T1 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_ECCC<T0, T1, T2> action, ComponentGroup group = null)
		    where T0 : class where T1 : class where T2 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_CCC<T0, T1, T2> action, ComponentGroup group = null)
		    where T0 : class where T1 : class where T2 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_ECCCC<T0, T1, T2, T3> action, ComponentGroup group = null)
		    where T0 : class where T1 : class where T2 : class where T3 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_CCCC<T0, T1, T2, T3> action, ComponentGroup group = null)
		    where T0 : class where T1 : class where T2 : class where T3 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_ECCCCC<T0, T1, T2, T3, T4> action, ComponentGroup group = null)
		    where T0 : class where T1 : class where T2 : class where T3 : class where T4 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_CCCCC<T0, T1, T2, T3, T4> action, ComponentGroup group = null)
		    where T0 : class where T1 : class where T2 : class where T3 : class where T4 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_ECCCCCC<T0, T1, T2, T3, T4, T5> action, ComponentGroup group = null)
		    where T0 : class where T1 : class where T2 : class where T3 : class where T4 : class where T5 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_CCCCCC<T0, T1, T2, T3, T4, T5> action, ComponentGroup group = null)
		    where T0 : class where T1 : class where T2 : class where T3 : class where T4 : class where T5 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_EBC<T0, T1> action, ComponentGroup group = null)
		    where T0 : struct, IBufferElementData where T1 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_BC<T0, T1> action, ComponentGroup group = null)
		    where T0 : struct, IBufferElementData where T1 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_EBCC<T0, T1, T2> action, ComponentGroup group = null)
		    where T0 : struct, IBufferElementData where T1 : class where T2 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_BCC<T0, T1, T2> action, ComponentGroup group = null)
		    where T0 : struct, IBufferElementData where T1 : class where T2 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_EBCCC<T0, T1, T2, T3> action, ComponentGroup group = null)
		    where T0 : struct, IBufferElementData where T1 : class where T2 : class where T3 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_BCCC<T0, T1, T2, T3> action, ComponentGroup group = null)
		    where T0 : struct, IBufferElementData where T1 : class where T2 : class where T3 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_EBCCCC<T0, T1, T2, T3, T4> action, ComponentGroup group = null)
		    where T0 : struct, IBufferElementData where T1 : class where T2 : class where T3 : class where T4 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_BCCCC<T0, T1, T2, T3, T4> action, ComponentGroup group = null)
		    where T0 : struct, IBufferElementData where T1 : class where T2 : class where T3 : class where T4 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_EBCCCCC<T0, T1, T2, T3, T4, T5> action, ComponentGroup group = null)
		    where T0 : struct, IBufferElementData where T1 : class where T2 : class where T3 : class where T4 : class where T5 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_BCCCCC<T0, T1, T2, T3, T4, T5> action, ComponentGroup group = null)
		    where T0 : struct, IBufferElementData where T1 : class where T2 : class where T3 : class where T4 : class where T5 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_ESC<T0, T1> action, ComponentGroup group = null)
		    where T0 : struct, ISharedComponentData where T1 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_SC<T0, T1> action, ComponentGroup group = null)
		    where T0 : struct, ISharedComponentData where T1 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_ESCC<T0, T1, T2> action, ComponentGroup group = null)
		    where T0 : struct, ISharedComponentData where T1 : class where T2 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_SCC<T0, T1, T2> action, ComponentGroup group = null)
		    where T0 : struct, ISharedComponentData where T1 : class where T2 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_ESCCC<T0, T1, T2, T3> action, ComponentGroup group = null)
		    where T0 : struct, ISharedComponentData where T1 : class where T2 : class where T3 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_SCCC<T0, T1, T2, T3> action, ComponentGroup group = null)
		    where T0 : struct, ISharedComponentData where T1 : class where T2 : class where T3 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_ESCCCC<T0, T1, T2, T3, T4> action, ComponentGroup group = null)
		    where T0 : struct, ISharedComponentData where T1 : class where T2 : class where T3 : class where T4 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_SCCCC<T0, T1, T2, T3, T4> action, ComponentGroup group = null)
		    where T0 : struct, ISharedComponentData where T1 : class where T2 : class where T3 : class where T4 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_ESCCCCC<T0, T1, T2, T3, T4, T5> action, ComponentGroup group = null)
		    where T0 : struct, ISharedComponentData where T1 : class where T2 : class where T3 : class where T4 : class where T5 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

        [System.Obsolete("Call Entities.ForEach() or Entities.With(group).ForEach() instead")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_SCCCCC<T0, T1, T2, T3, T4, T5> action, ComponentGroup group = null)
		    where T0 : struct, ISharedComponentData where T1 : class where T2 : class where T3 : class where T4 : class where T5 : class
		{
		    var q = Entities;
		    if (group != null)
			    q = q.With(group);
    		q.ForEach(action);
		}

	}
}

