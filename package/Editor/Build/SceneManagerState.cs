using UnityEditor.SceneManagement;
using System;
using System.IO;
using UnityEngine;
using System.Collections.Generic;

namespace UnityEditor.AddressableAssets
{
    /// <summary>
    /// Serializable object that can be used to save and restore the state of the editor scene manager.
    /// </summary>
    [Serializable]
    public class SceneManagerState
    {
        [Serializable]
        internal class SceneState
        {
            [SerializeField]
            internal bool m_isActive;
            [SerializeField]
            internal bool m_isLoaded;
            [SerializeField]
            internal string m_path;

            internal SceneState() { }
            internal SceneState(SceneSetup s)
            {
                m_isActive = s.isActive;
                m_isLoaded = s.isLoaded;
                m_path = s.path;
            }

            internal SceneSetup ToSceneSetup()
            {
                var ss = new SceneSetup();
                ss.isActive = m_isActive;
                ss.isLoaded = m_isLoaded;
                ss.path = m_path;
                return ss;
            }
        }

        [Serializable]
        internal class EBSSceneState
        {
            [SerializeField]
            internal string m_guid;
            [SerializeField]
            internal bool m_enabled;
            internal EBSSceneState() { }
            internal EBSSceneState(EditorBuildSettingsScene s) { m_guid = s.guid.ToString(); m_enabled = s.enabled; }
            internal EditorBuildSettingsScene GetBuildSettingsScene() { return new EditorBuildSettingsScene(new GUID(m_guid), m_enabled); }
        }

        [SerializeField]
        internal SceneState[] openSceneState;
        [SerializeField]
        internal EBSSceneState[] editorBuildSettingsSceneState;

        static SceneManagerState Create(SceneSetup[] scenes)
        {
            var scenesList = new List<SceneState>();
            var state = new SceneManagerState();
            foreach (var s in scenes)
                scenesList.Add(new SceneState(s));
            state.openSceneState = scenesList.ToArray();
            var edbss = new List<EBSSceneState>();
            foreach (var s in EditorBuildSettings.scenes)
                edbss.Add(new EBSSceneState(s));
            state.editorBuildSettingsSceneState = edbss.ToArray();
            return state;
        }

        internal SceneSetup[] GetSceneSetups()
        {
            var setups = new List<SceneSetup>();
            foreach (var s in openSceneState)
                setups.Add(s.ToSceneSetup());
            return setups.ToArray();
        }

        private EditorBuildSettingsScene[] GetEditorBuildSettingScenes()
        {
            var scenes = new List<EditorBuildSettingsScene>();
            foreach (var s in editorBuildSettingsSceneState)
                scenes.Add(s.GetBuildSettingsScene());
            return scenes.ToArray();
        }

        const string defaultPath = "Library/com.unity.addressables/SceneManagerState.json";
        /// <summary>
        /// Record the state of the EditorSceneManager and save to a JSON file.
        /// </summary>
        /// <param name="path">The path to save the recorded state.</param>
        public static void Record(string path = defaultPath)
        {
            try
            {
                var dir = Path.GetDirectoryName(path);
                if (!Directory.Exists(dir))
                    Directory.CreateDirectory(dir);
                File.WriteAllText(path, JsonUtility.ToJson(Create(EditorSceneManager.GetSceneManagerSetup())));
            }
            catch (Exception ex)
            {
                Debug.LogException(ex);
            }
        }

        /// <summary>
        /// Adds a set of scenes to the scene list for use in editor play mode.
        /// </summary>
        /// <param name="playModeScenes">The scenes to add to the editor scenes list.</param>
        public static void AddScenesForPlayMode(List<EditorBuildSettingsScene> playModeScenes)
        {
            if (playModeScenes != null)
            {
                List<EditorBuildSettingsScene> newScenesList = new List<EditorBuildSettingsScene>();
                newScenesList.AddRange(EditorBuildSettings.scenes);
                newScenesList.AddRange(playModeScenes);
                EditorBuildSettings.scenes = newScenesList.ToArray();
            }
        }

        /// <summary>
        /// Restore the state of the EditorSceneManager.
        /// </summary>
        /// <param name="path">The path to load the state data from.  This file is generated by calling SceneManagerState.Record.</param>
        /// <param name="restoreSceneManagerSetup">If true, the recorded active scenes are restored. EditorBuildSettings.scenes are always restored.</param>
        public static void Restore(string path = defaultPath, bool restoreSceneManagerSetup = false)
        {
            try
            {
                var state = JsonUtility.FromJson<SceneManagerState>(File.ReadAllText(path));
                if(restoreSceneManagerSetup)
                    EditorSceneManager.RestoreSceneManagerSetup(state.GetSceneSetups());
                EditorBuildSettings.scenes = state.GetEditorBuildSettingScenes();
            }
            catch (Exception ex)
            {
                Debug.LogException(ex);
            }
        }
    }
}
