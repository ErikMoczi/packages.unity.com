// Shadow pass
Pass
{		
	Tags { "LightMode"=${VFXPassShadow} }

	ZWrite On
	Blend Off
	
	HLSLPROGRAM
	#pragma target 4.5
	
	struct ps_input
	{
		float4 pos : SV_POSITION;
		float2 uv : TEXCOORD0;	
		#if USE_ALPHA_TEST || USE_FLIPBOOK_INTERPOLATION || VFX_USE_ALPHA_CURRENT
		// x: alpha threshold
		// y: frame blending factor
		// z: alpha
		nointerpolation float3 builtInInterpolants : TEXCOORD1;
		#endif
	};

#define VFX_VARYING_PS_INPUTS ps_input
#define VFX_VARYING_POSCS pos
#define VFX_VARYING_ALPHA builtInInterpolants.z
#define VFX_VARYING_ALPHATHRESHOLD builtInInterpolants.x
#define VFX_VARYING_FRAMEBLEND builtInInterpolants.y
#define VFX_VARYING_UV uv
		
${VFXBegin:VFXVertexAdditionalProcess}${VFXEnd}

// Needed for HDRP
#define SHADERPASS SHADERPASS_SHADOWS
#define USE_LEGACY_UNITY_MATRIX_VARIABLES
		
	${VFXInclude("Shaders/ParticleMeshes/Pass.template")}	
		
	#pragma fragment frag
	float frag(ps_input i) : SV_TARGET
	{
		float alpha = VFXGetFragmentColor(i).a;
#if HDRP_USE_BASE_COLOR_MAP_ALPHA
		alpha *= VFXGetTextureColor(VFX_SAMPLER(baseColorMap),i).a;
#endif	
		VFXClipFragmentColor(alpha,i);
		return 0;
	}
	ENDHLSL
}
