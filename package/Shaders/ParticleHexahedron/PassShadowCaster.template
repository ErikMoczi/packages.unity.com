// Shadow pass
Pass
{		
	Tags { "LightMode"=${VFXPassShadow} }

	ZWrite On
	Blend Off
	
	HLSLPROGRAM
	#pragma target 4.5
	
	struct ps_input
	{
		float4 pos : SV_POSITION;
		float3 offsets : TEXCOORD0;
		
		#if VFX_USE_ALPHA_CURRENT || USE_ALPHA_TEST 
		// x: alpha
		// y: alpha threshold
		nointerpolation float2 builtInInterpolants : TEXCOORD1;
		#endif
		
		nointerpolation uint faceID : TEXCOORD2;
	};

#define VFX_VARYING_PS_INPUTS ps_input
#define VFX_VARYING_POSCS pos
#if USE_ALPHA_TEST
#define VFX_VARYING_ALPHA builtInInterpolants.x
#define VFX_VARYING_ALPHATHRESHOLD builtInInterpolants.y
#endif
#define VFX_VARYING_OFFSETS offsets
#define VFX_VARYING_FACEID faceID
		
${VFXBegin:VFXVertexAdditionalProcess}
VFXApplyShadowBias(o.VFX_VARYING_POSCS, vPosWS);
${VFXEnd}

// Needed for HDRP
#define SHADERPASS SHADERPASS_SHADOWS
#define USE_LEGACY_UNITY_MATRIX_VARIABLES
	
	${VFXInclude("Shaders/ParticleHexahedron/Pass.template")}	
		
	#pragma fragment frag
	float frag(ps_input i) : SV_Target0
	{
		float alpha = VFXGetFragmentColor(i).a;		
		alpha *= VFXGetTextureColorWithProceduralUV(VFX_SAMPLER(mainTexture),i,VFXCubeGetUV(i)).a;		
		VFXClipFragmentColor(alpha,i);
		return 0;
	}
	ENDHLSL
}
