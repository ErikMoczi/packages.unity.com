#if false
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using UnityEditor;


namespace Unity.Entities
{
    class ForEachGenerator
    {
        enum Category
        {
            D, // ComponentData
            I, // in ComponentData
            C, // class
            B, // IBufferElementData
            K, // in IBufferElementData
            S, // ISharedComponentData
            Count,
        }

        static string[] Param =  
        {
            "ref T{0} c{0}", // ComponentData
            "in T{0} c{0}", // in ComponentData
            "T{0} c{0}", // class
            "DynamicBuffer<T{0}> c{0}", // IBufferElementData
            "in DynamicBuffer<T{0}> c{0}", // in IBufferElementData
            "T{0} c{0}", // ISharedComponentData
        };
        
        static string[] GenericConstraints =  
        {
            "where T{0} : struct, IComponentData", // ComponentData
            "where T{0} : struct, IComponentData", // in ComponentData
            "where T{0} : class", // class
            "where T{0} : struct, IBufferElementData", // IBufferElementData
            "where T{0} : struct, IBufferElementData", // in IBufferElementData
            "where T{0} : struct, ISharedComponentData", // ISharedComponentData
        };
        
        static string[] AccessFunction =  
        {
            "GetArchetypeChunkComponentType", // ComponentData
            "GetArchetypeChunkComponentType", // in ComponentData
            "GetArchetypeChunkComponentType", // class
            "GetArchetypeChunkBufferType", // IBufferElementData
            "GetArchetypeChunkBufferType", // in IBufferElementData
            "GetArchetypeChunkSharedComponentType", // ISharedComponentData
        };
        
        static string[] IsReadOnly=  
        {
            "false", // ComponentData
            "true", // in ComponentData
            "", // class
            "false", // IBufferElementData
            "true", // in IBufferElementData
            "", // ISharedComponentData
        };
        
        static string[] ChunkGetArray =  
        {
            "GetNativeArray(chunkComponentType{0}).GetUnsafePtr()", // ComponentData
            "GetNativeArray(chunkComponentType{0}).GetUnsafeReadOnlyPtr()", // in ComponentData
            "GetComponentObjects(chunkComponentType{0}, EntityManager)", // class
            "GetBufferAccessor(chunkComponentType{0})", // IBufferElementData
            "GetBufferAccessor(chunkComponentType{0})", // in IBufferElementData
            "GetSharedComponentData(chunkComponentType{0}, EntityManager)", // ISharedComponentData
        };
        
        static string[] ArrayAccess =  
        {
            "ref UnsafeUtilityEx.ArrayElementAsRef<T{0}>(array{0}, i)", // ComponentData
            "in UnsafeUtilityEx.ArrayElementAsRef<T{0}>(array{0}, i)", // in ComponentData
            "array{0}[i]", // class
            "array{0}[i]", // IBufferElementData
            "array{0}[i]", // in IBufferElementData
            "array{0}", // ISharedComponentData
        };

        [UnityEditor.MenuItem("Tools/Internal - ForEach_Lambda Generate")]
        static void ForEach_Lambda_Generator()
        {
            var combinations = new List<Category[]>(); 
            GetCombinations(new[] { Category.D, Category.C, Category.B, Category.S }, new Category[0], combinations, 1);

            int baseCount = combinations.Count;
            for (int i = 0; i != baseCount;i++)
                GetCombinations(new[] { Category.D }, combinations[i], combinations, 5);
            for (int i = 0; i != baseCount;i++)
                GetCombinations(new[] { Category.C }, combinations[i], combinations, 5);

            
            UnityEngine.Debug.Log("Combinations: " + combinations.Count);
            
            File.WriteAllText("Packages/com.unity.entities/Unity.Entities/Iterators/ForEachIterator.generated.cs", BuildFile(combinations));

            AssetDatabase.Refresh();
        }

        
        static void GetCombinations(Category[] supported, Category[] parent, List<Category[]> combinations, int depth)
        {
            for (int i = 0; i != supported.Length; i++)
            {
                var categories = new Category[parent.Length + 1];
                parent.CopyTo(categories, 0);
                categories[categories.Length - 1] = supported[i];
                
                combinations.Add(categories);

                if (depth-1 > 0)
                    GetCombinations(supported, categories, combinations, depth-1);
            }
        }

        static string BuildFile(List<Category[]> combinations)
        {
            var gen = new StringBuilder();
            gen.Append(
$@"/// Generated by ForEachGenerator.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;

namespace Unity.Entities
{{
    public partial class ComponentSystem
    {{
"           );

            foreach(var combo in combinations)
            {
                gen.Append(Generate(combo, true));
                gen.Append(Generate(combo, false));
            }
            
            gen.Append(
                $@"
    }}
{'}'}
"
            );

            return gen.ToString();
        }
        
        static string Generate(Category[] categories, bool hasEntity)
        {
            var delegateName = new StringBuilder();
            var genericTypes = new StringBuilder();
            var delegateParameters = new StringBuilder();
            var genericConstraints = new StringBuilder();
            var componentGroupTypes = new StringBuilder();
            var operateParams = new StringBuilder();

            delegateName.Append("F_");

            if (hasEntity)
            {
                delegateName.Append("E");
                delegateParameters.Append("Entity entity, ");
                operateParams.Append("entityArray[i], ");
            }

            for (int i = 0; i != categories.Length; i++)
            {
                int category = (int)categories[i];

                delegateName.Append(Enum.GetName(typeof(Category), categories[i]));
                genericTypes.Append($"T{i}");
                delegateParameters.AppendFormat(Param[category], i);
                genericConstraints.AppendFormat(GenericConstraints[category], i);

                componentGroupTypes.Append($"ComponentType.Create<T{i}>()");
                operateParams.AppendFormat(ArrayAccess[category], i);
                
                if (i != categories.Length - 1)
                {
                    operateParams.Append(", ");
                    genericTypes.Append (", ");
                    delegateParameters.Append (", ");
                    componentGroupTypes.Append (", ");
                    genericConstraints.Append (" ");
                }
            }
            
            var builder = new StringBuilder();
            
            builder.AppendLine
            (
$@"         
        protected delegate void {delegateName}<{genericTypes}>({delegateParameters})            {genericConstraints};

        unsafe protected void ForEach<{genericTypes}>({delegateName}<{genericTypes}> operate, ComponentGroup group = null) {genericConstraints}
        {{
#if ENABLE_UNITY_COLLECTIONS_CHECKS
            EntityManager.m_InsideForEach++;
            try
#endif
            {{
                if (group == null)
                {{
                    group = GetCachedComponentGroup_Delegate(operate);
                    if (group == null)
                        group = CreateCachedComponentGroup_Delegate(operate, {componentGroupTypes});
                {'}'}"
        );

            if (hasEntity)
            {
                builder.AppendLine(
$@"            
                var entityType = GetArchetypeChunkEntityType();"
            );
            }

            for (int i = 0; i != categories.Length; i++)
            {
                int category = (int)categories[i];
                builder.AppendLine
                (
$@"                var chunkComponentType{i} = {AccessFunction[category]}<T{i}>({IsReadOnly[category]});"
                );
            }

            builder.AppendLine
            (
$@"
                using (var chunks = group.CreateArchetypeChunkArray(Allocator.TempJob))
                {{
                    foreach (var chunk in chunks)
                    {{
                        var length = chunk.Count;
"
            );

            for (int i = 0; i != categories.Length; i++)
            {
                int category = (int)categories[i];

                var getFunc = string.Format(ChunkGetArray[category], i);
                builder.AppendLine
                (
$@"                        var array{i} = chunk.{getFunc};"
                );
            }


            if (hasEntity)
            {
                builder.AppendLine(
$@"                        var entityArray = chunk.GetNativeArray(entityType);"
                );
            }
            builder.AppendLine
            (
$@"                        for (int i = 0; i < length; ++i)"
            );


            builder.Append
            (
$@"                            operate({operateParams});
                    {'}'}
                {'}'}
            {'}'}
#if ENABLE_UNITY_COLLECTIONS_CHECKS
            finally
            {{
                EntityManager.m_InsideForEach--;
            {'}'}
#endif
        {'}'}"
            );

            return builder.ToString();
        }
    }
}
#endif